{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230 haokee-wiki","text":""},{"location":"#_1","title":"\u7ad9\u70b9\u4f5c\u7528","text":"<p>\u6536\u96c6\u597d\u6e34\u9e45\u5e73\u65f6\u7684 OI \u5b66\u4e60\u3001\u7ed9\u66f4\u591a OIer \u63d0\u4f9b\u5c0f\u5c0f\u7684\u5e2e\u52a9\u3002\u7531\u4e8e\u597d\u6e34\u9e45\u662f\u4e00\u4e2a\u7a77 B\uff0c\u6ca1\u6709 money\uff0c\u56e0\u6b64\u672c\u7ad9\u6ca1\u6709\u57df\u540d\uff0c\u8bbf\u95ee\u65f6\u8bf7\u8bbf\u95ee ip \u5730\u5740 127.0.0.1:8000\uff0c\u5e76\u4e14\u7531\u4e8e\u66f4\u6ca1\u6709 money \u4e70\u670d\u52a1\u5668\uff0c\u56e0\u6b64\u5c31\u53ea\u80fd\u6682\u65f6\u6258\u7ba1\u5230\u81ea\u5df1\u7684\u7535\u8111\u4e0a\uff0c\u56e0\u6b64\u5982\u679c\u4f60\u53d1\u73b0\u8fd9\u4e2a\u7ad9\u70b9\u65e0\u6cd5\u8bbf\u95ee\u4e86\uff0c\u90a3\u5c31\u8bf4\u660e\u597d\u6e34\u9e45\u7684\u7535\u8111\u5173\u673a\u4e86\u3002</p>"},{"location":"#_2","title":"\u7ad9\u70b9\u4e0a\u7684\u6587\u6863","text":"<p>\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a\u7b97\u6cd5\u3001\u6570\u636e\u7ed3\u6784\u65b9\u9762\u3001\u73af\u5883\u914d\u7f6e\u2026\u2026\u5355\u9760\u597d\u6e34\u9e45\u7684\u529b\u91cf\u80af\u5b9a\u662f\u65e0\u6cd5\u5b8c\u6210\u7684\uff0c\u56e0\u6b64\u597d\u6e34\u9e45\u8bda\u6073\u5730\u9080\u8bf7\u60a8\u4e00\u540c\u52a0\u5165\uff0c\u7ed9\u8fd9\u4e2a\u7834\u7834\u70c2\u70c2\u7684\u5c0f\u7ad9\u70b9\u8d21\u732e\u4e00\u70b9\u70b9\u529b\u91cf\u3002\uff08\u597d\u6e34\u9e45\u4f1a\u7ed9 \\(1\\sim 5\\) \u4eba\u6c11\u5e01\u7684\u62a5\u4ec7\uff0c\u554a\u4e0d\u62a5\u916c\uff09</p> <p>\u6700\u540e\uff0c\u6b22\u8fce\u5927\u5bb6\u8bbf\u95ee\u8fd9\u4e2a\u6bd4\u53d9\u5229\u4e9a\u524d\u7ebf\u8fd8\u8981\u7834\u70c2\u7684\u5c0f\u7ad9\u70b9\u3002</p>"},{"location":"Configure/","title":"\u914d\u7f6e\u73af\u5883","text":""},{"location":"Configure/#ide","title":"\u7f16\u8bd1\u5668\u3001\u7f16\u8f91\u5668\u548c IDE","text":""},{"location":"Configure/#_2","title":"\u7f16\u8bd1\u5668","text":"<p>\u6211\u4eec\u77e5\u9053\uff0c\u8ba1\u7b97\u673a\u7684\u5904\u7406\u65b9\u5f0f\u662f\u4e8c\u8fdb\u5236\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u673a\u5668\u7801\u4e5f\u662f\u4e8c\u8fdb\u5236\u7684\uff0c\u53ea\u6709\u673a\u5668\u7801\u624d\u53ef\u4ee5\u8ba9\u8ba1\u7b97\u673a\u505a\u51fa\u4e8b\u60c5\u3002\u4f46\u662f\uff0c\u673a\u5668\u7801\u5b83\u53cd\u4eba\u7c7b\u554a\uff01\u4f60\u60f3\u4e00\u60f3\uff0c\u5149\u662f\u8ba9\u8ba1\u7b97\u673a\u6267\u884c\u4e00\u4e2a\u52a0\u6cd5\u5c31\u9700\u8981\u597d\u591a\u4ee3\u7801\uff0c\u56e0\u4e3a\u8ba1\u7b97\u673a\u53ea\u80fd\u5bf9\u4f4d\u8fdb\u884c\u5177\u4f53\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u6211\u4eec\u80af\u5b9a\u662f\u4e0d\u53ef\u80fd\u76f4\u63a5\u5199\u673a\u5668\u7801\u7684\u3002</p> <p>\u56e0\u6b64\uff0c\u540e\u4eba\u5f00\u53d1\u4e86\u6c47\u7f16\u8bed\u8a00\uff0c\u8fd9\u79cd\u8bed\u8a00\u4f7f\u7528\u4e86\u5f88\u591a\u82f1\u6587\u7b26\u53f7\uff0c\u628a\u82f1\u6587\u7b26\u53f7\u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u673a\u5668\u7801\u5c31\u53ef\u4ee5\u8ba9\u8ba1\u7b97\u673a\u8fd0\u884c\u3002\u4f46\u662f\u6c47\u7f16\u8bed\u8a00\u53ca\u5176\u590d\u6742\uff0c\u53ea\u662f\u5199\u8d77\u6765\u7b80\u5355\u4e00\u4e9b\uff0c\u4f46\u662f\u4ee3\u7801\u4ecd\u7136\u5f88\u957f\u3002</p> <p>\u8fd9\u65f6\uff0c\u9ad8\u7ea7\u8bed\u8a00\u5c31\u51fa\u73b0\u4e86\uff0c\u5982\uff1aC/C++\u3001Python\u3001Java\u3001C#\u2026\u2026\u8fd9\u79cd\u8bed\u8a00\u7684\u4ee3\u7801\u6784\u6210\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u800c\u8fd0\u884c\u7684\u65b9\u5f0f\u5c31\u662f\u9700\u8981\u4e00\u4e2a\u7ffb\u8bd1\u5668\uff0c\u628a\u4ee3\u7801\u7ffb\u8bd1\u6210\u673a\u5668\u7801\u3002\u4e00\u822c\u6709\u7f16\u8bd1\u5f0f\u548c\u89e3\u91ca\u5f0f\uff0c\u7f16\u8bd1\u5f0f\u5c31\u662f\u76f4\u63a5\u7f16\u8bd1\u6210\u673a\u5668\u7801\uff0c\u7136\u540e\u8f93\u51fa\u6587\u4ef6\uff0c\u6700\u540e\u70b9\u51fb\u6587\u4ef6\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u4e86\uff1b\u89e3\u91ca\u5f0f\u5c31\u662f\u76f8\u5f53\u4e8e\u8fd0\u884c\u65f6\u9010\u53e5\u7ffb\u8bd1\uff0c\u53ef\u4ee5\u66f4\u597d\u5730\u9762\u5bf9\u8fd0\u884c\u65f6\u7684\u9519\u8bef\uff0c\u4f46\u662f\u727a\u7272\u4e86\u901f\u5ea6\u3002</p> <p>\u4fe1\u606f\u5b66\u5965\u8d5b\u4e00\u822c\u4f7f\u7528 C/C++\uff0c\u8fd9\u662f\u4e00\u79cd\u7f16\u8bd1\u5f0f\u8bed\u8a00\u3002\u76f8\u5173\u7684\u7f16\u8bd1\u5668\u6709\uff1aGNU\u3001LLVM\u3001MSVC \u8fd9\u4e09\u79cd\uff0c\u53ef\u4ee5\u6839\u636e\u81ea\u8eab\u60c5\u51b5\u9009\u62e9\u3002</p>"},{"location":"Configure/#_3","title":"\u7f16\u8f91\u5668","text":"<p>\u7f16\u8f91\u5668\u5c31\u662f\u4e13\u95e8\u7528\u6765\u7f16\u8f91\u4ee3\u7801\u7684\uff0c\u53ef\u4ee5\u5728\u91cc\u9762\u83b7\u5f97\u66f4\u597d\u5730\u6253\u4ee3\u7801\u4f53\u9a8c\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u662f\u5de8\u4f6c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728\u8bb0\u4e8b\u672c\u91cc\u9762\u6253\u4ee3\u7801\u3002\u4e0d\u8fc7\uff0c\u7f16\u8f91\u5668\u4e00\u822c\u90fd\u914d\u5907\u6709\uff1a\u8bed\u6cd5\u8865\u5168\u3001\u4ee3\u7801\u9ad8\u4eae\u7b49\u3002\u8fd9\u6bcf\u4e00\u9879\u62ce\u51fa\u6765\u90fd\u662f\u66b4\u6253\u8bb0\u4e8b\u672c\u7684\u5b58\u5728\u3002</p>"},{"location":"Configure/#ide_1","title":"IDE\uff08\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff09","text":"<p>\u5c31\u662f\u96c6\u6210\u4e86\u7f16\u8bd1\u5668\u3001\u7f16\u8f91\u5668\u7b49\u7b49\u73a9\u610f\u7684\u4e00\u4e2a\u8f6f\u4ef6\uff0c\u5f88\u597d\u4f7f\u7528\u3001\u4e0d\u9700\u8981\u8fc7\u591a\u7684\u914d\u7f6e\uff0c\u53cd\u6b63\u5c31\u662f\u5f88\u7701\u5fc3\uff0c\u88c5\u8fd9\u4e2a\u5c31\u5bf9\u4e86\u3002</p>"},{"location":"FirstProgram/","title":"\u7b2c\u4e00\u4e2a\u7a0b\u5e8f","text":"<p>\u5728\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u4e3a\u4e86\u68c0\u6d4b\u6211\u4eec\u7684\u914d\u7f6e\u662f\u5426\u53ef\u884c\uff0c\u4e00\u822c\u90fd\u8f93\u51fa <code>Hello world!</code>\u3002\u8fd9\u8c61\u5f81\u7740\u4f60\u6253\u5f00\u4e86\u4e00\u4e2a\u65b0\u7684\u4e16\u754c\uff0c\u4eff\u4f5b\u5728\u5411\u8fd9\u4e2a\u65b0\u7684\u4e16\u754c\u95ee\u597d\u4e00\u822c\u3002</p> <p>\u5728 C++ \u5f53\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>cout</code> \u547d\u4ee4\u8fdb\u884c\u8f93\u51fa\u3002\u63a5\u4e0b\u6765\uff0c\u5c31\u8ba9\u6211\u4eec\u6253\u5f00\u7f16\u8f91\u5668\u6216 IDE</p>"},{"location":"Johnson/","title":"\u5168\u6e90\u6700\u77ed\u8def\u7b97\u6cd5 - Johnson | \u9605\u8bfbpdf","text":""},{"location":"Johnson/#_1","title":"\u9898\u9762\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a \\(n\\) \u4e2a\u70b9\uff0c\\(m\\) \u6761\u8fb9\u7684\u6709\u5411\u56fe\u3002\u5047\u8bbe \\(i\\) \u5230 \\(j\\) \u7684\u6700\u77ed\u8ddd\u79bb\u662f \\(d_{(i,j)}\\)\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u8f93\u51fa \\(n\\) \u884c\uff0c\u7b2c \\(i\\) \u884c\u8f93\u51fa \\(\\sum\\limits_{j=1}^{n}d_{(i,j)}\\)\u3002\u5bf9\u4e8e\u4e0d\u8fde\u901a\u7684\u4e24\u4e2a\u70b9 \\(i,j\\)\uff0c\\(d_{(i,j)}=10^9\\)\u3002\u7279\u522b\u5730\uff0c\u5982\u679c\u8fd9\u4e2a\u56fe\u5f53\u4e2d\u6709\u8d1f\u73af\uff0c\u4f60\u9700\u8981\u8f93\u51fa \\(-1\\)\u3002</p>"},{"location":"Johnson/#_2","title":"\u7b97\u6cd5\u7b80\u4ecb","text":""},{"location":"Johnson/#_3","title":"\u521d\u6b65\u601d\u8003","text":"<p>\u9996\u5148\u6211\u4eec\u60f3\u4e00\u60f3\uff0c\u5168\u6e90\u8d1f\u6743\u6700\u77ed\u8def\u5e94\u8be5\u4f7f\u7528\u4ec0\u4e48\u7b97\u6cd5\u89e3\u51b3\u5462\uff1f\ud83e\udd14 \u5f53\u7136\u662f Floyd \u5566\uff0c\u53ef\u4ee5\u5728 \\(\\mathcal O(n^3)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e4b\u5185\u6c42\u51fa\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u3002\u4f46\u662f\u6b64\u9898 \\(1\\le n\\le 3\\times 10^3\\)\uff0c\u5f88\u660e\u663e\u4f1a TLE\u3002\ud83d\ude05</p> <p>\u6211\u4eec\u4e4b\u524d\u8fd8\u5b66\u4e60\u8fc7\u4e86\u5f88\u591a\u7684\u5355\u6e90\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u5176\u5b9e\u53ef\u4ee5\u8dd1 \\(n\\) \u8fb9\u8fd9\u6837\u7684\u7b97\u6cd5\u5c31\u884c\u4e86\u3002\ud83d\ude09 \u6bd4\u5982 Bellman-Ford\uff0c\u8dd1 \\(n\\) \u904d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\mathcal O(n^2m)\\)\uff1b\u8fd8\u6709\u6211\u4eec\u719f\u77e5\u7684\u66f4\u5feb\u6700\u77ed\u8def\u7b97\u6cd5\u4f46\u5176\u5b9e\u5927\u591a\u6570\u65f6\u5019\u5e76\u6ca1\u6709\u90a3\u4e48\u5feb\u7684 SPFA\uff0c\u6700\u597d \\(\\mathcal O(n^2+nm)\\)\uff0c\u4f46\u662f\u6700\u574f\u60c5\u51b5\u8ddf Bellman-Ford \u4e00\u6837\uff0c\u662f \\(\\mathcal O(n^2m)\\) \u7684\u3002\u53ef\u662f\uff0c\u8fd9\u4e9b\u6700\u77ed\u8def\u7b97\u6cd5\u90fd\u4e0d\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u90a3\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u53bb\u5199\u5462\uff1f\ud83d\ude1e</p>"},{"location":"Johnson/#_4","title":"\u7b97\u6cd5\u601d\u60f3","text":"<p>\u6211\u4eec\u77e5\u9053 Dijkstra \u662f\u53ef\u4ee5\u5728\u975e\u5e38\u5feb\u7684\u65f6\u95f4\u5185\u6c42\u51fa\u6700\u77ed\u8def\u7684\uff0c\u8dd1 \\(n\\) \u904d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\mathcal O(nm\\log_2 n)\\)\uff0c\u4f46\u662f\u5904\u7406\u4e0d\u4e86\u8d1f\u8fb9\u6743\u7684\u56fe\u3002Bellman-Ford \u597d\u5199\uff0c\u8fd8\u53ef\u4ee5\u5904\u7406\u8d1f\u8fb9\u6743\u7684\u56fe\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u975e\u5e38\u9ad8\u3002\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u9009\u62e9\u5462\uff1f\ud83d\ude0c</p> <p>\ud83d\udca1 \u5176\u5b9e\u65e9\u5c31\u6709\u4eba\u601d\u8003\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u63d0\u51fa\u4e86\u5bf9\u5e94\u7684\u89e3\u51b3\u65b9\u6848\uff1a</p> \u7b97\u6cd5\u80cc\u666f <p>Johnson \u662f\u4e00\u79cd\u6c42\u8d1f\u8fb9\u6743\u56fe\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u7684\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u5728 1977 \u5e74\u88ab Donald B. Johnson \u63d0\u51fa\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u60f3\u51fa\u4e00\u79cd\u7b80\u5355\u7684\u6807\u6ce8\u8fb9\u6743\u7684\u65b9\u6cd5\u3002\u5bf9\u4e8e\u4efb\u610f\u4e00\u6761\u8fb9\uff0c\u6211\u4eec\u5c06\u8fb9\u6743\u52a0\u4e0a \\(x\\)\uff0c\u7136\u540e\u6c42\u51fa\u7684\u6700\u77ed\u8def\u5047\u8bbe\u957f\u5ea6\u662f \\(k\\)\uff0c\u6211\u4eec\u5c31\u5c06\u7b54\u6848\u51cf\u53bb \\(x\\times k\\)\u3002\u4f46\u662f\u8fd9\u79cd\u6807\u6ce8\u8fb9\u6743\u7684\u65b9\u6cd5\u662f\u9519\u8bef\u7684\u3002\u56e0\u4e3a\u7531\u4e8e\u52a0\u4e0a\u4e86 \\(x\\) \u7684\u5173\u7cfb\uff0c\u90a3\u4e48 Dijkstra \u7684\u4f18\u5148\u961f\u5217\u5c31\u4f1a\u4f9d\u8d56\u7ecf\u8fc7\u8fb9\u7684\u6570\u91cf\uff0c\u4f46\u662f\u5f88\u663e\u7136\uff0c\u7ecf\u8fc7\u7684\u8fb9\u7684\u6570\u91cf\u4f1a\u5f71\u54cd\u5230\u7b97\u6cd5\u7684\u5904\u7406\u3002\u4f46\u662f Johnson \u7b97\u6cd5\u4f7f\u7528\u4e86\u4e00\u79cd\u5168\u65b0\u7684\u6807\u6ce8\u8fb9\u6743\u7684\u65b9\u5f0f\u3002\ud83d\udd0c</p> <p>\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u865a\u62df\u8282\u70b9\uff0c\u7f16\u53f7\u53ef\u4ee5\u4e3a\u4efb\u610f\u503c\u3002\u5c06\u865a\u62df\u8282\u70b9\u5411\u4efb\u610f\u8282\u70b9\u90fd\u8fde\u4e0a\u4e00\u6761\u8fb9\uff0c\u6743\u503c\u4e3a \\(0\\)\uff0c\u7136\u540e\u4ece\u865a\u62df\u8282\u70b9\u5f00\u59cb\u8dd1\u4e00\u8fb9 Bellman-Ford\u3002\u8dd1\u5b8c\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u6c42\u51fa\u4ece\u4efb\u610f\u4e00\u4e2a\u70b9\u5230 \\(i\\) \u7684\u8ddd\u79bb\u4e86\u3002\u8fd9\u65f6\uff0c\u4f60\u53ef\u80fd\u4f1a\u8bf4\uff1a\u54ce\u5440\uff0c\u5230 \\(i\\) \u7684\u8ddd\u79bb\u6700\u77ed\u4e0d\u5c31\u662f\u76f4\u63a5\u4ece \\(i\\) \u5f00\u59cb\u561b\u3002\u6b63\u6743\u56fe\u786e\u5b9e\u662f\u8fd9\u6837\u5b50\u7684\uff0c\u4f46\u662f\u8fd9\u91cc\u662f\u8d1f\u6743\u56fe\u3002</p> <p>\u8dd1\u5b8c\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u9700\u8981\u91cd\u65b0\u6807\u6ce8\u8fb9\u6743\u3002\u5047\u8bbe\u7b2c \\(i\\) \u6761\u8fb9\u8d77\u59cb\u70b9\u4e3a \\(u_i\\)\uff0c\u7ec8\u6b62\u70b9\u4e3a \\(v_i\\)\uff0c\u8fb9\u6743\u4e3a \\(w_i\\)\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06 \\(w_i\\) \u7684\u503c\u6539\u4e3a \\(w_i+d_{(u_i)}-d_{(v_i)}\\)\u3002\ud83e\uddee \u6700\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u8dd1 \\(n\\) \u904d Dijkstra \u5c31\u80fd\u6c42\u51fa\u7b54\u6848\u4e86\u3002\u6ce8\u610f\uff1a\u6c42\u51fa\u7684\u7b54\u6848\u540c\u6837\u9700\u8981\u8fdb\u884c\u5904\u7406\u3002</p>"},{"location":"Johnson/#_5","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"Johnson/#bellman-ford","title":"Bellman-Ford + \u4fee\u6539\u8fb9\u6743","text":"<p>\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u7684\u5199\u51fa\u4e00\u4e2a Bellman-Ford\u3002\u8fd9\u79cd\u7b97\u6cd5\u7279\u522b\u7b80\u5355\uff0c\u53ea\u9700\u8981\u679a\u4e3e \\(n\\) \u6b21\uff0c\u4e5f\u5c31\u662f\u677e\u5f1b\u7684\u6b21\u6570\uff0c\u7136\u540e\u679a\u4e3e \\(m\\) \u6761\u8fb9\uff0c\u76f4\u63a5\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u5c31\u884c\u4e86\u3002\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\mathcal O(nm)\\) \u7684\u3002\u6ce8\u610f\u6211\u7684\u4ee3\u7801\uff0c\u867d\u7136\u662f\u4e09\u91cd\u5faa\u73af\uff0c\u4f46\u5176\u5b9e\u4e8c\u4e09\u5c42\u5faa\u73af\u52a0\u8d77\u6765\u662f \\(\\mathcal O(m)\\) \u7684\u3002</p> <pre><code>for (ll i = 0; i &lt;= n; i++) {              // \u679a\u4e3e n \u6b21\u677e\u5f1b\n  for (ll j = 0; j &lt;= n; j++) {            // \u679a\u4e3e n \u4e2a\u70b9\n    for (auto k : e[j]) {                  // \u679a\u4e3e\u6bcf\u6761\u8fb9\n      d[k.to] = min(d[k.to], d[j] + k.v);  // \u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\n    }\n  }\n}\n</code></pre> <p>\u7136\u540e\u6211\u4eec\u5c31\u9700\u8981\u5224\u65ad\u8d1f\u73af\u3002\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u91cd\u65b0\u904d\u5386\u8fd9 \\(m\\) \u6761\u8fb9\uff0c\u82e5\u8fd8\u53ef\u4ee5\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u5c31\u4ee3\u8868\u51fa\u73b0\u4e86\u8d1f\u73af\u3002\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u6700\u77ed\u8def\u7684\u6700\u5927\u957f\u5ea6\u662f \\(n-1\\) \u7684\uff0c\u5faa\u73af \\(n\\) \u6b21\u662f\u4e3a\u4e86\u4fdd\u9669\u3002\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u601d\u8def\uff0c\u5c31\u662f\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u8868\u793a\u662f\u5426\u8fdb\u884c\u4e86\u677e\u5f1b\u64cd\u4f5c\uff0c\u5982\u679c\u6ca1\u6709\u4e86\u5c31\u9000\u51fa\u5faa\u73af\u3002\u4f46\u662f\u9898\u76ee\u6570\u636e\u6bd4\u8f83\u6c34\uff0c\u800c\u4e14\u6b64\u5904 Bellman-Ford \u7684\u590d\u6742\u5ea6\u8fd8\u6ca1\u6709 \\(n\\) \u904d Dijkstra \u9ad8\uff0c\u56e0\u6b64\u5c31\u6ca1\u6709\u8fdb\u884c\u4f18\u5316\u3002</p> <pre><code>bool hasNegativeRing(vector&lt;ll&gt; &amp;d) {  // d \u8868\u793a\u8ddd\u79bb\n  for (ll i = 1; i &lt;= m; i++) {        // \u679a\u4e3e m \u6761\u8fb9\n    if (d[u[i]] + w[i] &lt; d[v[i]]) {    // \u5982\u679c\u8fd8\u53ef\u4ee5\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\n      return 1;                        // \u8fd4\u56de\u6709\u8d1f\u73af\n    }\n  }\n  return 0;\n}\n</code></pre> <p>\u63a5\u7740\u5c31\u662f\u4fee\u6539\u8fb9\u6743\u7684\u90e8\u5206\uff0c\u7167\u7740\u4e0a\u9762\u7684\u601d\u8def\u5199\u5c31\u884c\u4e86\u3002</p> <pre><code>void clearEdge() { fill(e, e + n + 1, vector&lt;Node&gt;()); }  // \u6e05\u7a7a\u6240\u6709\u7684\u8fb9\n\nvoid build(vector&lt;ll&gt; &amp;d) {                               // \u91cd\u65b0\u5efa\u56fe\n  clearEdge();                                            // \u53bb\u6389\u4e4b\u524d\u7684\u8fb9\n  for (ll i = 1; i &lt;= m; i++) {                           // \u679a\u4e3e\u8fb9\n    e[u[i]].push_back({v[i], w[i] + d[u[i]] - d[v[i]]});  // \u4f7f\u7528\u90bb\u63a5\u8868\u8fdb\u884c\u5b58\u8fb9\n  }\n}\n</code></pre>"},{"location":"Johnson/#dijkstra","title":"Dijkstra + \u7edf\u8ba1\u7b54\u6848","text":"<p>\u8fd9\u4e2a\u6211\u4eec\u5df2\u7ecf\u70c2\u719f\u4e8e\u5fc3\u4e86\uff0c\u6807\u51c6\u4ee3\u7801\u6211\u90fd\u80fd\u5012\u80cc\u5982\u6d41\uff0c\u8ba9\u6211\u80cc\u4e00\u904d <code>)}v.i + ]to.to[...</code>\u2026\u2026    </p> <pre><code>vector&lt;ll&gt; dijkstra(ll s) {                            // \u4ece s \u5f00\u59cb\n  vector&lt;ll&gt; d(n + 1, 1e9), f(n + 1, 0);               // \u8ddd\u79bb\u6570\u7ec4\u548c\u8bbf\u95ee\u6570\u7ec4\n  for (q.push({s, 0}), d[s] = 0; q.size(); q.pop()) {  // \u52a0\u5165\u961f\u5217\u3001\u66f4\u6539\u8ddd\u79bb\u4e3a 0\uff1b\u5982\u679c\u961f\u5217\u4e0d\u4e3a\u7a7a\uff1b\u9000\u51fa\u961f\u5217\n    if (f[(t = q.top()).to]) {                         // \u5982\u679c\u662f\u8bbf\u95ee\u8fc7\u7684\u5143\u7d20\n      continue;                                        // \u91cd\u65b0\u5faa\u73af\n    }\n    f[t.to] = 1;                                       // \u6253\u4e0a\u6807\u8bb0\n    for (auto i : e[t.to]) {                           // \u679a\u4e3e\u90bb\u70b9\n      if (d[t.to] + i.v &lt; d[i.to]) {                   // \u5982\u679c\u66f4\u4f18\n        q.push({i.to, d[i.to] = d[t.to] + i.v});       // \u66f4\u6539\u5e76\u5165\u961f\n      }\n    }\n  }\n  return d;\n}\n</code></pre> <p>\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u5199\u51fa\u677f\u5b50\u4e86\u3002</p>"},{"location":"Johnson/#_6","title":"\u6700\u7ec8\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;  // \u8f93\u5165 / \u8f93\u51fa \u6d41\n#include &lt;vector&gt;    // \u52a8\u6001\u6570\u7ec4\n#include &lt;queue&gt;     // \u4f18\u5148\u961f\u5217\n\nusing namespace std;   // \u4f7f\u7528 std \u540d\u5b57\u7a7a\u95f4\nusing ll = long long;  // \u8bb0\u5f97\u5f00 long long\n\nconst ll kMaxN = 6e3 + 5;  // \u70b9 / \u8fb9 \u7684\u6700\u5927\u6570\u91cf\n\nstruct Node {                                            // \u72b6\u6001\u7684\u7ed3\u6784\u4f53\n  ll to, v;                                              // \u7ec8\u6b62\u8282\u70b9\u548c\u8fb9\u6743\n\n  friend bool operator&lt;(const Node &amp;a, const Node &amp;b) {  // \u91cd\u8f7d\u5c0f\u4e8e\u8fd0\u7b97\u7b26\n    return a.v &gt; b.v;                                    // \u5c0f\u6839\u5806\uff0c\u56e0\u6b64\u586b\u5927\u4e8e\u53f7\n  }\n} t;                                                     // \u4e34\u65f6\u53d8\u91cf\uff0cDijkstra \u91cc\u9762\u7528\u7684\n\nll u[kMaxN], v[kMaxN], w[kMaxN], n, m;  // \u8fb9\u3001n \u548c m\nvector&lt;Node&gt; e[kMaxN];                  // \u90bb\u63a5\u8868\npriority_queue&lt;Node&gt; q;                 // \u4f18\u5148\u961f\u5217\n\nvoid read() {                         // \u8bfb\u5165\u51fd\u6570\n  cin &gt;&gt; n &gt;&gt; m;                      // \u8f93\u5165 n,m\n  for (ll i = 1; i &lt;= m; i++) {       // \u8f93\u5165 m \u6761\u8fb9\n    cin &gt;&gt; u[i] &gt;&gt; v[i] &gt;&gt; w[i];      // \u9700\u8981\u4f7f\u7528\u6570\u7ec4\u8bb0\u5f55\n    e[u[i]].push_back({v[i], w[i]});  // \u5b58\u5165\u90bb\u63a5\u8868\n  }\n}\n\nvoid createVisualStartPoint() {  // \u521b\u5efa\u865a\u62df\u8282\u70b9\uff0c\u7f16\u53f7\u4e3a 0\n  for (ll i = 1; i &lt;= n; i++) {  // \u679a\u4e3e n \u4e2a\u70b9\n    e[0].push_back({i, 0});      // \u6bcf\u4e2a\u70b9\u90fd\u5efa\u4e00\u6761\u957f\u5ea6\u4e3a 0 \u7684\u8fb9\n  }\n}\n\nbool hasNegativeRing(vector&lt;ll&gt; &amp;d) {  // \u5224\u65ad\u662f\u5426\u6709\u8d1f\u73af\n  for (ll i = 1; i &lt;= m; i++) {        // \u679a\u4e3e m \u6761\u8fb9\n    if (d[u[i]] + w[i] &lt; d[v[i]]) {    // \u5982\u679c\u8fd8\u53ef\u4ee5\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\n      return 1;                        // \u6709\u8d1f\u73af\n    }\n  }\n  return 0;                            // \u6ca1\u6709\u8d1f\u73af\n}\n\nvoid clearEdge() { fill(e, e + n + 1, vector&lt;Node&gt;()); }  // \u6e05\u7a7a\u90bb\u63a5\u8868\uff0c\u7ed9\u6bcf\u4e00\u4e2a vector \u90fd\u9644\u4e00\u4e2a\u7a7a\u7684\u503c\n\nvoid build(vector&lt;ll&gt; &amp;d) {                               // \u91cd\u65b0\u5efa\u56fe\n  clearEdge();                                            // \u6e05\u7a7a\n  for (ll i = 1; i &lt;= m; i++) {                           // \u679a\u4e3e\u4e4b\u524d\u7684 m \u6761\u8fb9\n    e[u[i]].push_back({v[i], w[i] + d[u[i]] - d[v[i]]});  // \u66f4\u6539\u8fb9\u6743\n  }\n}\n\nvector&lt;ll&gt; bellmanFord(ll s) {               // \u4ece\u865a\u62df\u8282\u70b9\u5f00\u59cb\u8dd1\u6700\u77ed\u8def\n  vector&lt;ll&gt; d(n + 1, 1e9);                  // \u8ddd\u79bb\u6570\u7ec4\uff0c\u521d\u59cb\u4e3a 10^9\n  d[s] = 0;                                  // \u6807\u8bb0\u8d77\u59cb\u70b9\n  for (ll i = 0; i &lt;= n; i++) {              // \u679a\u4e3e n \u6b21\u677e\u5f1b\n    for (ll j = 0; j &lt;= n; j++) {            // \u679a\u4e3e n \u4e2a\u70b9\n      for (auto k : e[j]) {                  // \u679a\u4e3e\u8fb9\n        d[k.to] = min(d[k.to], d[j] + k.v);  // \u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\n      }\n    }\n  }\n  if (hasNegativeRing(d)) {                  // \u5982\u679c\u6709\u8d1f\u73af\n    exit((cout &lt;&lt; \"-1\\n\", 0));               // \u8f93\u51fa -1 \u5e76\u9000\u51fa\n  }\n  build(d);                                  // \u91cd\u65b0\u5efa\u56fe\n  return d;                                  // \u8fd4\u56de\u8ddd\u79bb\u6570\u7ec4\n}\n\nvector&lt;ll&gt; dijkstra(ll s) {                            // \u4ece s \u5f00\u59cb\n  vector&lt;ll&gt; d(n + 1, 1e9), f(n + 1, 0);               // \u8ddd\u79bb\u6570\u7ec4\u548c\u8bbf\u95ee\u6570\u7ec4\n  for (q.push({s, 0}), d[s] = 0; q.size(); q.pop()) {  // \u52a0\u5165\u961f\u5217\u3001\u66f4\u6539\u8ddd\u79bb\u4e3a 0\uff1b\u5982\u679c\u961f\u5217\u4e0d\u4e3a\u7a7a\uff1b\u9000\u51fa\u961f\u5217\n    if (f[(t = q.top()).to]) {                         // \u5982\u679c\u662f\u8bbf\u95ee\u8fc7\u7684\u5143\u7d20\n      continue;                                        // \u91cd\u65b0\u5faa\u73af\n    }\n    f[t.to] = 1;                                       // \u6253\u4e0a\u6807\u8bb0\n    for (auto i : e[t.to]) {                           // \u679a\u4e3e\u90bb\u70b9\n      if (d[t.to] + i.v &lt; d[i.to]) {                   // \u5982\u679c\u66f4\u4f18\n        q.push({i.to, d[i.to] = d[t.to] + i.v});       // \u66f4\u6539\u5e76\u5165\u961f\n      }\n    }\n  }\n  return d;                                            // \u8fd4\u56de\u8ddd\u79bb\u6570\u7ec4\n}\n\nvoid solve() {                               // \u89e3\n  createVisualStartPoint();                  // \u5efa\u7acb\u865a\u62df\n  auto d1 = bellmanFord(0);                  // \u8dd1 Bellman-Ford\uff0c\u5b58\u8fdb d1\n  for (int i = 1; i &lt;= n; i++) {             // \u679a\u4e3e n \u4e2a\u70b9\n    auto d2 = dijkstra(i);                   // \u8dd1 Dijkstra\uff0c\u5b58\u8fdb d2\n    ll ans = 0;                              // \u7b54\u6848\n    for (int j = 1; j &lt;= n; j++) {           // \u679a\u4e3e\u5176\u4ed6\u7684\u70b9\n      if (d2[j] == 1e9) {                    // \u5982\u679c\u4e0d\u80fd\u5230\u8fbe\n        ans += j * 1e9;                      // \u76f4\u63a5\u7d2f\u52a0\n      } else {                               // \u5426\u5219\n        ans += j * (d2[j] + d1[j] - d1[i]);  // \u8ddd\u79bb\u5c31\u8981\u52a0\u4e0a d1[j] \u51cf\u53bb d1[i]\n      }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';                     // \u8f93\u51fa\u7b54\u6848\n  }\n}\n\nint main() {  // \u4e3b\u51fd\u6570\n  read();     // \u8f93\u5165\n  solve();    // \u8f93\u51fa\n  return 0;   // \u597d\u4e60\u60ef\n}\n</code></pre>"},{"location":"LCA/","title":"\u6700\u8fd1\u516c\u5171\u7956\u5148 LCA","text":""},{"location":"LCA/#_1","title":"\u6982\u8ff0","text":""},{"location":"LCA/#_2","title":"\u5b9a\u4e49","text":"<p>\u5bf9\u4e8e \\(x\\) \u548c \\(y\\) \u4e24\u4e2a\u7ed3\u70b9\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u8282\u70b9 \\(z\\)\uff0c\u4f7f\u5f97 \\(z\\) \u65e2\u662f \\(x\\) \u7684\u7956\u5148\u4e5f\u662f \\(y\\) \u7684\u7956\u5148\uff0c\u5e76\u4e14 \\(z\\) \u79bb \\(x\\) \u548c \\(y\\) \u7684\u8ddd\u79bb\u6700\u8fd1\u3002\u6b64\u65f6\uff0c\u7ed3\u70b9 \\(z\\) \u5c31\u662f \\(x\\) \u548c \\(y\\) \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08Least Common Ancestor, LCA\uff09\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4f5c\u7ed3\u70b9\u672c\u8eab\u4e5f\u662f\u81ea\u5df1\u7684\u7956\u5148\u3002</p>"},{"location":"LCA/#_3","title":"\u5c1d\u8bd5\u6c42\u89e3","text":"<p>\u9996\u5148\u7531\u6d45\u81f3\u6df1\u627e\u5230\u4e24\u4e2a\u7ed3\u70b9\u7684\u7956\u5148\u5217\u8868\uff0c\u7136\u540e\u518d\u7531\u6df1\u81f3\u6d45\u627e\u5230\u6700\u8fd1\u7684\u516c\u5171\u7956\u5148\u7ed3\u70b9\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u867d\u7136\u662f\u66b4\u529b\uff0c\u4f46\u662f\u5728\u4e8c\u53c9\u6811\u5f53\u4e2d\u662f\u53ef\u4ee5\u8fbe\u5230 \\(\\mathcal O(\\log_2 n)\\) \u7684\u901f\u5ea6\u7684\uff0c\u4f46\u662f\u8fd9\u91cc\u5e76\u4e0d\u4e00\u5b9a\u662f\u4e8c\u53c9\u6811\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u8fd9\u9897\u6811\u9000\u5316\u5230\u4e00\u6761\u94fe\u7684\u65f6\u5019\u65f6\uff0c\u8fd9\u79cd\u7b97\u6cd5\u53ef\u80fd\u8fbe\u5230 \\(\\mathcal O(n)\\) \u751a\u81f3 \\(\\mathcal O(n^2)\\)\u3002</p>"},{"location":"LCA/#_4","title":"\u5c1d\u8bd5\u6539\u8fdb","text":"<p>\u8fd9\u79cd\u65b9\u6cd5\u53ef\u80fd\u4f1a\u9020\u6210\u4e24\u4e2a\u7ed3\u70b9\u7684\u7956\u5148\u5217\u8868\u957f\u5ea6\u4e0d\u4e00\u6837\uff0c\u7ed9\u6211\u4eec\u5339\u914d\u65f6\u5e26\u6765\u9ebb\u70e6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8dd1\u4e00\u904d dfs \u6c42\u51fa\u4efb\u610f\u8282\u70b9\u79bb\u6839\u7ed3\u70b9\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u5728\u6c42\u89e3\u65f6\u5148\u5c06\u6df1\u5ea6\u8f83\u5927\u7684\u7ed3\u70b9\u5411\u4e0a\u63d0\uff0c\u7136\u540e\u4e24\u4e2a\u7ed3\u70b9\u540c\u65f6\u5411\u4e0a\u67e5\u627e\u6700\u8fd1\u7684\u516c\u5171\u7956\u5148\u3002\u8fd9\u6837\u5b50\u5c31\u7701\u53bb\u4e86\u5339\u914d\u7684\u65f6\u95f4\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u9ad8\u8fd8\u662f\u6709\u53ef\u80fd\u4f1a\u8fbe\u5230 \\(\\mathcal O(n)\\)\uff0c\u4e0d\u7b26\u5408\u671f\u671b\u3002</p>"},{"location":"LCA/#_5","title":"\u7b97\u6cd5","text":""},{"location":"LCA/#_6","title":"\u500d\u589e\u601d\u60f3","text":""},{"location":"LCA/#_7","title":"\u4f18\u5316","text":"<p>\u6211\u4eec\u53ef\u4ee5\u8dd1\u4e00\u8fb9\u6811\u4e0a dp\uff0c\u8bbe \\(dp_{(i,j)}\\) \u8868\u793a\u4e3a\u7ed3\u70b9 \\(i\\) \u5f80\u4e0a \\(2^j\\) \u4e2a\u7956\u5148\u7684\u7f16\u53f7\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u500d\u589e\u7b97\u6cd5\u5728 \\(\\mathcal O(\\log_2 n)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e4b\u5185\u5c06\u4e24\u4e2a\u7ed3\u70b9\u7684\u5c42\u7ea7\u63d0\u5347\u5230\u540c\u4e00\u5c42\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u4f18\u5316\u679a\u4e3e\u516c\u5171\u8282\u70b9\u4e86\u3002</p> <p>\u56e0\u4e3a\u6709\u5355\u8c03\u6027\uff0c\u4e5f\u5c31\u662f\u5f80\u4e0a\u4e0a\u5347\u7684\u9ad8\u5ea6\u8d8a\u5927\uff0c\u90a3\u4e48\u6210\u4e3a\u516c\u5171\u7956\u5148\u7684\u6982\u7387\u5c31\u8d8a\u9ad8\uff0c\u56e0\u6b64\u6211\u4eec\u540c\u6837\u4f7f\u7528\u500d\u589e\u601d\u60f3\uff0c\u90a3\u4e48\u4e5f\u53ef\u4ee5\u5728 \\(\\mathcal O(\\log_2 n)\\) \u7684\u65f6\u95f4\u4e4b\u5185\u6c42\u51fa\u4e24\u4e2a\u7ed3\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u6ce8\u610f\u8fd9\u91cc\u4ecd\u7136\u8981\u4f7f\u7528\u4e4b\u524d\u7684 \\(dp\\) \u6570\u7ec4\u3002</p>"},{"location":"LCA/#_8","title":"\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nconst int kMaxN = 5e5 + 5;\n\nint dp[kMaxN][25], d[kMaxN], lg[kMaxN], n, m, s;\nvector&lt;int&gt; e[kMaxN];\n\nvoid dfs(int x, int f) {\n  dp[x][0] = f, d[x] = d[f] + 1;         // \u66f4\u65b0 dp \u6570\u7ec4\u548c\u8ddd\u79bb\u6570\u7ec4\n  for (int i = 1; i &lt;= lg[d[x]]; i++) {  // \u679a\u4e3e\u5f80\u524d 2^i \u7684\u7956\u5148\n    dp[x][i] = dp[dp[x][i - 1]][i - 1];  // \u8ba1\u7b97\n  }\n  for (int i : e[x]) {         // \u679a\u4e3e\u90bb\u70b9\n    f != i &amp;&amp; (dfs(i, x), 0);  // \u9012\u5f52\u5904\u7406\n  }\n}\n\nint LCA(int x, int y) {\n  for (d[x] &lt; d[y] &amp;&amp; (x ^= y, y ^= x, x ^= y); d[x] &gt; d[y]; x = dp[x][lg[d[x] - d[y]] - 1]) { }\n  // \u9996\u5148\u4fdd\u6301 x &gt; y\uff0c\u7136\u540e\u8fdb\u884c\u500d\u589e\uff0c\u76f4\u5230 d[x] = d[y]\n  if (x == y) {  // \u5982\u679c\u5df2\u7ecf\u7b49\u4e8e\u4e86\n    return x;    // \u76f4\u63a5\u8fd4\u56de x\n  }\n  for (int k = lg[d[x]] - 1; k &gt;= 0; k--) {                // \u5f80\u4e0a\u505a\u5dee\u5206\n    dp[x][k] != dp[y][k] &amp;&amp; (x = dp[x][k], y = dp[y][k]);  // \u53d6\u6700\u4f18\u503c\n  }\n  return dp[x][0];  // \u8bb0\u5f97\u8fd4\u56de\u4e0a\u9762\u4e00\u4e2a\u6570\n}\n\nint main() {\n  cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;\n  for (int i = 1, u, v; i &lt; n; i++) {\n    cin &gt;&gt; u &gt;&gt; v;\n    e[u].push_back(v), e[v].push_back(u);\n  }\n  for (int i = 1; i &lt;= n; lg[i] = lg[i - 1] + (1 &lt;&lt; lg[i - 1] == i), i++) { }\n  dfs(s, 0);\n  for (int i = 1, x, y; i &lt;= m; i++) {\n    cin &gt;&gt; x &gt;&gt; y;\n    cout &lt;&lt; LCA(x, y) &lt;&lt; '\\n';\n  }\n  return 0;\n}\n</code></pre>"},{"location":"LCA/#tarjan","title":"Tarjan","text":""},{"location":"LCA/#_9","title":"\u601d\u8def","text":"<p>\u8fd9\u662f\u4e00\u79cd\u79bb\u7ebf\u7b97\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u7ed3\u70b9\u7684\u6240\u6709\u5b50\u6811\u5408\u5e76\u5230\u8fd9\u4e2a\u7ed3\u70b9\u5185\uff0c\u7136\u540e\u5f53\u8981\u67e5\u8be2\u8fd9\u4e2a\u5b50\u6811\u5185\u7684\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ed3\u70b9\u5c31\u662f\u7b54\u6848\u4e86\u3002\u800c\u652f\u6301\u5feb\u901f\u5408\u5e76\u64cd\u4f5c\u7684\u5c31\u662f\u5e76\u67e5\u96c6\u4e86\u3002\u6211\u4eec\u5728\u51fd\u6570\u5185\uff0c\u9996\u5148\u6211\u4eec\u9700\u8981\u9012\u5f52\u5904\u7406\u5b50\u6811\uff0c\u7136\u540e\u5408\u5e76\u81f3\u5f53\u524d\u7ed3\u70b9\uff0c\u63a5\u7740\u904d\u5386\u6240\u6709\u9700\u8981\u6c42\u89e3\u7684\u4e8c\u5143\u7ec4\uff0c\u7136\u540e\u5b58\u8fdb \\(a\\) \u6570\u7ec4\u91cc\u9762\u5c31\u884c\u4e86\u3002</p> <p>\u8fd9\u79cd\u7b97\u6cd5\u662f\u6700\u5feb\u7684\uff0c\u4f46\u662f\u53ea\u80fd\u7528\u4f5c\u79bb\u7ebf\u6210\u4e86\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6700\u5927\u5f31\u70b9\u3002\u5e76\u4e14\u4f60\u8fd8\u9700\u8981\u5c06\u6240\u6709\u7684\u8be2\u95ee\u8bfb\u5165\u8fdb\u6765\u5728\u5904\u7406\uff0c\u5728\u5206\u6279\u8be2\u95ee\u3001\u6709\u66f4\u6539\u64cd\u4f5c\u7684\u60c5\u51b5\u4e0b\u4e0d\u80fd\u5f88\u597d\u7684\u652f\u6301\u3002</p> <p>\u6ce8\u610f</p> <p>\u6734\u7d20 Tarjan \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u4e0d\u662f \\(\\mathcal O(n+m)\\) \u7684\uff0c\u800c\u662f \\(\\mathcal O(m\\times\\alpha(n+m,n)+n)\\) \u7684\u3002\u5982\u679c\u9700\u8981\u8ffd\u6c42\u7ebf\u6027\u7684\u8bdd\uff0c\u53ef\u4ee5\u770b \u8fd9\u7bc7\u82f1\u6587\u8bba\u6587\u3002</p>"},{"location":"LCA/#_10","title":"\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nconst int kMaxN = 1e6 + 5;\n\nstruct Node {\n  vector&lt;int&gt; e;             // \u90bb\u70b9\n  vector&lt;pair&lt;int, int&gt;&gt; q;  // \u67e5\u8be2\n  int f;\n} v[kMaxN];\n\nint a[kMaxN], n, m, s;\n\nint F(int x) {\n  return !v[x].f ? x : v[x].f = F(v[x].f);\n}\n\nvoid tarjan(int x, int f) {\n  for (int i : v[x].e) {  // \u679a\u4e3e\u90bb\u70b9\n    if (i != f) {         // \u5982\u679c\u4e0d\u4e3a\u7236\u4eb2\n      tarjan(i, x);       // \u9012\u5f52\u5904\u7406\n    }\n  }\n  for (auto i : v[x].q) {  // \u679a\u4e3e\u9700\u8981\u7684\u7b54\u6848\n    if (i.first == x) {    // \u5982\u679c\u6b63\u597d\u7b49\u4e8e x\n      a[i.second] = x;     // \u76f4\u63a5\u8bb0\u5f55\n    } else {\n      a[i.second] = F(i.first);  // \u5426\u5219\u66f4\u6539\u4e3a i.first \u7684\u6839\n    }\n  }\n  v[x].f = f;  // \u5408\u5e76\n}\n\nint main() {\n  ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n  cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;\n  for (int i = 1, x, y; i &lt; n; i++) {\n    cin &gt;&gt; x &gt;&gt; y;\n    v[x].e.push_back(y), v[y].e.push_back(x);\n  }\n  for (int i = 1, x, y; i &lt;= m; i++) {\n    cin &gt;&gt; x &gt;&gt; y;\n    v[x].q.emplace_back(y, i), v[y].q.emplace_back(x, i);\n  }\n  tarjan(s, 0);\n  for (int i = 1; i &lt;= m; i++) {\n    cout &lt;&lt; a[i] &lt;&lt; '\\n';\n  }\n  return 0;\n}\n</code></pre>"},{"location":"LCA/#_11","title":"\u4e60\u9898","text":"<p>\u6ce8\u610f</p> <p>\u6700\u8fd1\u516c\u5171\u7956\u5148\u57fa\u672c\u4e0a\u4e0d\u4f1a\u8003\u6a21\u677f\u9898\uff0c\u800c\u662f\u9898\u76ee\u505a\u7740\u505a\u7740\u5c31\u4f1a\u7528\u4e00\u4e0b\u7684\u90a3\u79cd\uff0c\u6240\u4ee5\u9700\u8981\u80cc\u719f\u677f\u5b50\uff0c\u4e0d\u8fc7\u57fa\u672c\u4e0a\u53ea\u7528\u80cc\u500d\u589e\u7684\u90a3\u79cd\u5c31\u884c\u4e86\u3002\u6bd4\u5982\u63a5\u4e0b\u6765\u7684\u9898\u76ee\u4e2d\uff0c\u5c31\u6709\u5f88\u591a\u662f\u5c06\u4e00\u6761\u8def\u5f84\u62c6\u5206\u6210\u4e24\u6761\u8def\u5f84\u7684\u7136\u540e\u6c42\u89e3\u7684\u90a3\u79cd\u3002</p>"},{"location":"LCA/#_12","title":"\u5224\u65ad\u8def\u5f84","text":""},{"location":"LCA/#_13","title":"\u9898\u76ee\u5927\u610f","text":"<p>\u6709\u4e00\u9897 \\(n\\) \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u7ed9\u51fa \\(q\\) \u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e00\u4e2a\u8be2\u95ee\u6709 \\(a,b,c,d\\) \u56db\u4e2a\u7ed3\u70b9\u7f16\u53f7\uff0c\u95ee\u4f60 \\(a\\) \u5230 \\(b\\) \u548c \\(c\\) \u5230 \\(d\\) \u7684\u8def\u5f84\u662f\u5426\u78b0\u5230\u8fc7\u3002</p>"},{"location":"LCA/#_14","title":"\u601d\u8def","text":"<p>\u8fd9\u9898\u6211\u4eec\u4f7f\u7528\u500d\u589e\u6c42\u89e3 LCA\u3002\u7136\u540e\u5c31\u975e\u5e38\u7b80\u5355\u4e86\uff0c\u53d8\u6210\u4e86\u5224\u65ad\u662f\u5426\u78b0\u5230\u8fc7\u7684\u95ee\u9898\u3002\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u51fa \\(a\\) \u548c \\(b\\) \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u5c31\u5047\u8bbe\u4e3a \\(l_1\\)\uff0c\u7136\u540e\u5f53 \\(c\\) \u548c \\(l_1\\) \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u8bc1\u53f7\u4e3a \\(l_1\\) \u7684\u65f6\u5019\uff0c\u6216\u8005 \\(d\\) \u548c \\(l_1\\) \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u6b63\u597d\u4e3a \\(l_1\\) \u7684\u65f6\u5019\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u78b0\u5230\u8fc7\u3002\u7136\u540e\u53cd\u8fc7\u6765\u518d\u5224\u65ad\u4e00\u6b21\u5c31\u884c\u4e86\u3002</p>"},{"location":"LCA/#_15","title":"\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nconst int kMaxN = 5e5 + 5;\n\nint dp[kMaxN][25], d[kMaxN], lg[kMaxN], n, q;\nvector&lt;int&gt; e[kMaxN];\n\nvoid dfs(int x, int f) {\n  dp[x][0] = f, d[x] = d[f] + 1;\n  for (int i = 1; i &lt;= lg[d[x]]; i++) {\n    dp[x][i] = dp[dp[x][i - 1]][i - 1];\n  }\n  for (int i : e[x]) {\n    f != i &amp;&amp; (dfs(i, x), 0);\n  }\n}\n\nint LCA(int x, int y) {\n  for (d[x] &lt; d[y] &amp;&amp; (x ^= y, y ^= x, x ^= y); d[x] &gt; d[y]; x = dp[x][lg[d[x] - d[y]] - 1]) { }\n  if (x == y) {\n    return x;\n  }\n  for (int k = lg[d[x]] - 1; k &gt;= 0; k--) {\n    dp[x][k] != dp[y][k] &amp;&amp; (x = dp[x][k], y = dp[y][k]);\n  }\n  return dp[x][0];\n}\n\nint main() {\n  cin &gt;&gt; n &gt;&gt; q;\n  for (int i = 1, u, v; i &lt; n; i++) {\n    cin &gt;&gt; u &gt;&gt; v;\n    e[u].push_back(v), e[v].push_back(u);\n  }\n  for (int i = 1; i &lt;= n; lg[i] = lg[i - 1] + (2 * lg[i - 1] == i), i++) { }\n  dfs(1, 0);\n  for (int x1, y1, x2, y2; q; q--) {\n    cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;\n    int z1 = LCA(x1, y1), z2 = LCA(x2, y2);  // \u83b7\u53d6\u7956\u5148\n    cout &lt;&lt; ((LCA(x2, z1) == z1 || LCA(y2, z1) == z1) &amp;&amp; (LCA(x1, z2) == z2 || LCA(y1, z2) == z2) ? 'Y' : 'N') &lt;&lt; '\\n';  // \u5224\u65ad\n  }\n  return 0;\n}\n</code></pre>"},{"location":"LCA/#_16","title":"\u6c42\u548c","text":""},{"location":"LCA/#_17","title":"\u9898\u76ee\u5927\u610f","text":"<p>\u6709\u4e00\u9897 \\(n\\) \u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u8bbe \\(d(i)\\) \u8868\u793a\u4e3a\u7b2c \\(i\\) \u4e2a\u7ed3\u70b9\u79bb\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u90a3\u4e48\u6bcf\u4e00\u6b21\u8be2\u95ee\uff0c\u90fd\u7ed9\u4f60\u4e24\u4e2a\u70b9\u548c\u4e00\u4e2a\u6574\u6570 \\(k\\)\uff0c\u7136\u540e\u5047\u8bbe\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u7684\u7f16\u53f7\u6570\u7ec4\u4e3a \\(a\\)\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u6c42\u89e3 \\(\\sum\\limits_{i=1}^{|a|}d(a_i)^k\\)\u3002</p>"},{"location":"LCA/#_18","title":"\u601d\u8def","text":"<p>\u8fd9\u9898\u662f\u4e00\u9053\u6811\u4e0a\u5dee\u5206\u7684\u9898\u76ee\u3002\u6211\u4eec\u8bbe \\(p_{(i,j)}\\) \u8868\u793a\u4e3a\u6839\u8282\u70b9 \\(1\\) \u5230 \\(i\\) \u53f7\u7ed3\u70b9\u4e0a\uff0c\u6240\u6709\u51fd\u6570\u7684\u503c\u7684 \\(j\\) \u6b21\u65b9\u7684\u548c\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8dd1\u6811\u4e0a dp\uff0c\u6c42\u51fa \\(dp\\) \u6570\u7ec4\u548c \\(p\\) \u6570\u7ec4\uff0c\u7136\u540e\u5c06\u6bcf\u4e00\u6b21\u8be2\u95ee\u4e00\u5200\u5241\u6210\u4e24\u534a\uff0c\u5206\u522b\u4f5c\u5dee\u5206\u64cd\u4f5c\uff0c\u6700\u540e\u7d2f\u52a0\u8d77\u6765\u5c31\u884c\u4e86\u3002\u6ce8\u610f\u8fd9\u9898\u9700\u8981\u5bf9 \\(998244353\\) \u53d6\u6a21\uff0c\u7136\u800c\u5dee\u5206\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5dee\u5206\u5230\u8d1f\u6570\uff0c\u4f46\u662f\u8fd9\u9898\u7406\u8bba\u4e0a\u4e0d\u53ef\u80fd\u5dee\u5206\u5230\u590d\u6570\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6bcf\u4e00\u6b21\u76f8\u51cf\u5c31\u5148\u52a0\u4e0a \\(998277353\\) \u4e4b\u540e\u518d\u53d6\u6a21\u3002</p>"},{"location":"LCA/#_19","title":"\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\nusing ll = long long;\n\nconst ll kMaxN = 3e5 + 5, kMod = 998244353;\n\nll d[kMaxN], fa[kMaxN], p[kMaxN][51], dp[kMaxN][25], lg[kMaxN], n, m, u, v, k;\nvector&lt;ll&gt; e[kMaxN];\n\nvoid dfs(ll x, ll f) {\n  dp[x][0] = f, d[x] = d[f] + 1, fa[x] = f;  // \u8ba1\u7b97\u7236\u4eb2\u3001\u8ddd\u79bb\n  ll pow = 1;                                // d[x] ^ 0\n  for (ll i = 1; i &lt;= 50; i++) {             // d[x] ^ i\n    pow = (pow * d[x]) % kMod;               // \u8ba1\u7b97\u5e42\uff0c\u8bb0\u5f97\u53d6\u6a21\n    p[x][i] = (p[f][i] + pow) % kMod;        // \u5b58\u4e0b\u6765\uff0c\u8bb0\u5f97\u53d6\u6a21\n  }\n  for (ll i = 1; i &lt;= lg[d[x]]; i++) {       // \u66f4\u65b0 dp \u6570\u7ec4\n    dp[x][i] = dp[dp[x][i - 1]][i - 1];\n  }\n  for (ll i : e[x]) {\n    f != i &amp;&amp; (dfs(i, x), 0);\n  }\n}\n\nll LCA(ll x, ll y) {  // \u6700\u8fd1\u516c\u5171\u7956\u5148\u6a21\u677f\n  for (d[x] &lt; d[y] &amp;&amp; (x ^= y, y ^= x, x ^= y); d[x] &gt; d[y]; x = dp[x][lg[d[x] - d[y]] - 1]) { }\n  if (x == y) {\n    return x;\n  }\n  for (ll k = lg[d[x]] - 1; k &gt;= 0; k--) {\n    dp[x][k] != dp[y][k] &amp;&amp; (x = dp[x][k], y = dp[y][k]);\n  }\n  return dp[x][0];\n}\n\nint main() {\n  cin &gt;&gt; n, d[0] = -1;  // \u6839\u8282\u70b9\u8ddd\u79bb\u5e94\u4e3a 0\n  for (ll i = 1, u, v; i &lt; n; i++) {\n    cin &gt;&gt; u &gt;&gt; v;\n    e[u].push_back(v);\n    e[v].push_back(u);\n  }\n  for (ll i = 1; i &lt;= n; lg[i] = lg[i - 1] + (1 &lt;&lt; lg[i - 1] == i), i++) { }\n  dfs(1, 0);\n  for (cin &gt;&gt; m; m; m--) {\n    cin &gt;&gt; u &gt;&gt; v &gt;&gt; k;\n    u &gt; v &amp;&amp; (u ^= v, v ^= u, u ^= v);  // \u4fdd\u6301 u &lt;= v\n    ll l = LCA(u, v);                   // \u83b7\u53d6\u6700\u8fd1\u516c\u5171\u7956\u5148\n    if (l == u || l == v) {             // \u5982\u679c\u662f\u4e00\u6761\u8fb9\n      cout &lt;&lt; (p[v][k] - p[fa[u]][k] + kMod) % kMod &lt;&lt; '\\n';                     // \u76f4\u63a5\u8ba1\u7b97\n    } else {\n      cout &lt;&lt; ((((p[v][k] - p[fa[l]][k] + kMod) % kMod +                         // \u5de6\u8fb9\u7684\u548c\n                 (p[u][k] - p[fa[l]][k] + kMod) % kMod) % kMod -                 // \u53f3\u8fb9\u7684\u548c\n                 (p[l][k] - p[fa[l]][k] + kMod) % kMod) + kMod) % kMod &lt;&lt; '\\n';  // \u51cf\u53bb d[l] ^ k\n    }\n  }\n  return 0;\n}\n</code></pre>"},{"location":"LCA/#_20","title":"\u7ee7\u7eed\u5dee\u5206","text":""},{"location":"LCA/#_21","title":"\u9898\u76ee\u5927\u610f","text":"<p>\\(k\\) \u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e00\u6b21 \\(u\\) \u5230 \\(v\\) \u8def\u5f84\u4e0a\u9762\u7684\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684\u503c\u90fd\u8981\u52a0 \\(1\\)\uff0c\u95ee\u4f60\u6700\u540e\u6700\u5927\u7684\u503c\u662f\u591a\u5c11\u3002</p>"},{"location":"LCA/#_22","title":"\u601d\u8def","text":"<p>\u8fd8\u662f\u53ef\u4ee5\u4f5c\u5dee\u5206\uff0c\u5c06\u4e00\u6761\u8def\u5f84\u5206\u6210\u4e24\u534a\uff0c\u4f5c\u5dee\u5206\u64cd\u4f5c\uff0c\u6700\u540e\u8dd1\u4e00\u8fb9 dfs \u8fd8\u539f\u6570\u7ec4\uff0c\u53d6\u6700\u5927\u503c\u5c31\u884c\u4e86\u3002</p>"},{"location":"LCA/#_23","title":"\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nconst int kMaxN = 5e4 + 5;\n\nint dp[kMaxN][25], d[kMaxN], lg[kMaxN], p[kMaxN], fa[kMaxN], a[kMaxN], n, k;\nvector&lt;int&gt; e[kMaxN];\n\nvoid dfs(int x, int f) {\n  fa[x] = f;\n  dp[x][0] = f, d[x] = d[f] + 1;\n  for (int i = 1; i &lt;= lg[d[x]]; i++) {\n    dp[x][i] = dp[dp[x][i - 1]][i - 1];\n  }\n  for (int i : e[x]) {\n    f != i &amp;&amp; (dfs(i, x), 0);\n  }\n}\n\nint LCA(int x, int y) {\n  for (d[x] &lt; d[y] &amp;&amp; (x ^= y, y ^= x, x ^= y); d[x] &gt; d[y]; x = dp[x][lg[d[x] - d[y]] - 1]) { }\n  if (x == y) {\n    return x;\n  }\n  for (int k = lg[d[x]] - 1; k &gt;= 0; k--) {\n    dp[x][k] != dp[y][k] &amp;&amp; (x = dp[x][k], y = dp[y][k]);\n  }\n  return dp[x][0];\n}\n\nvoid solve(int x, int f) {  // \u8fd8\u539f\u6570\u7ec4\n  a[x] = p[x];              // \u521d\u59cb\u5316\u4e3a\u5f53\u524d\u5143\u7d20\n  for (int i : e[x]) {      // \u679a\u4e3e\u90bb\u70b9\n    if (i != f) {\n      solve(i, x);          // \u9012\u5f52\u5904\u7406\n      a[x] += a[i];         // \u7d2f\u52a0\u548c\n    }\n  }\n}\n\nint main() {\n  cin &gt;&gt; n &gt;&gt; k;\n  for (int i = 1, u, v; i &lt; n; i++) {\n    cin &gt;&gt; u &gt;&gt; v;\n    e[u].push_back(v);\n    e[v].push_back(u);\n  }\n  for (int i = 1; i &lt;= n; i++) {\n    lg[i] = lg[i - 1] + (1 &lt;&lt; lg[i - 1] == i);\n  }\n  dfs(1, 0);\n  for (int i = 1, u, v; i &lt;= k; i++) {\n    cin &gt;&gt; u &gt;&gt; v;\n    int l = LCA(u, v);                   // \u83b7\u53d6\u6700\u8fd1\u516c\u5171\u7956\u5148\n    p[u]++, p[v]++, p[l]--, p[fa[l]]--;  // \u5dee\u5206\n  }\n  solve(1, 0);                                     // \u6c42\u89e3\n  cout &lt;&lt; *max_element(a + 1, a + n + 1) &lt;&lt; '\\n';  // \u6c42\u6700\u5927\u503c\n  return 0;\n}\n</code></pre>"},{"location":"System%20of%20Difference%20Constraints/","title":"\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7b80\u4ecb","text":""},{"location":"System%20of%20Difference%20Constraints/#_2","title":"\u7b97\u6cd5\u4ecb\u7ecd","text":""},{"location":"System%20of%20Difference%20Constraints/#_3","title":"\u7b97\u6cd5\u601d\u60f3","text":"<p>\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u591a\u5143\u4e00\u6b21\u4e0d\u7b49\u5f0f\u7ec4\uff0c\u4ed6\u6709 \\(n\\) \u4e2a\u53d8\u91cf\u4ee5\u53ca \\(m\\) \u6761\u7ea6\u675f\u6761\u4ef6\uff0c\u6bcf\u4e00\u4e2a\u7ea6\u675f\u6761\u90fd\u5f62\u5982 \\(x_i-x_j\\le k\\)\uff0c\u5176\u4e2d \\(i\\) \u548c \\(j\\) \u90fd\u662f \\(0\\sim n\\) \u7684\u6574\u6570\uff0c\u800c \\(k\\) \u5fc5\u987b\u662f\u5e38\u6570\uff0c\u53ef\u6b63\u53ef\u8d1f\u3002\u6211\u4eec\u9700\u8981\u89e3\u51b3\u8fd9\u4e2a\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u662f\u5426\u6709\u89e3\uff0c\u4e5f\u5c31\u662f\u662f\u5426\u6ee1\u4e00\u7ec4 \\((x_1,x_2,\\dots,x_n)\\) \u7684\u89e3\u80fd\u591f\u6ee1\u8db3\u6240\u6709 \\(m\\) \u6761\u7ea6\u675f\u6761\u4ef6\u3002</p> <p>\u6839\u636e\u4e0d\u7b49\u5f0f\u7684\u6027\u8d28\uff0c\u6bcf\u4e00\u4e2a\u7ea6\u675f\u6761\u4ef6\u90fd\u53ef\u4ee5\u66f4\u6539\u4e3a \\(x_i\\le x_j+k\\)\uff0c\u800c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6700\u77ed\u8def\u7684\u6c42\u89e3\u5f53\u4e2d\u6b63\u597d\u6709\u4e00\u4e2a\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u548c\u5b83\u51e0\u4e4e\u4e00\u6a21\u4e00\u6837\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u6bcf\u4e00\u4e2a\u53d8\u91cf \\(x_i\\) \u770b\u505a\u56fe\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5c06\u6bcf\u4e00\u4e2a\u7ea6\u675f\u6761\u4ef6\u770b\u4e3a\u56fe\u4e2d\u7684\u4e00\u6761\u8fb9\u3002\u6bcf\u4e00\u4e2a\u7ea6\u675f\u6761\u4ef6 \\(x_i-x_j\\le k\\to x_i\\le x_j+k\\) \u53ef\u4ee5\u770b\u505a\u4ece\u7ed3\u70b9 \\(j\\) \u5411\u7ed3\u70b9 \\(i\\) \u8fde\u4e86\u4e00\u6761\u6743\u503c\u4e3a \\(k\\) \u7684\u6709\u5411\u8fb9\u3002</p> <p>\u7ee7\u7eed\u6839\u636e\u4e0d\u7b49\u5f0f\u7684\u6027\u8d28\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u5e38\u6570 \\(a\\)\uff0c\u90a3\u4e48\u82e5 \\((x_1,x_2,\\dots,x_n)\\) \u662f\u4e00\u7ec4\u89e3\u7684\u8bdd\uff0c\\((x_1+d,x_2+d,\\dots,x_n+d)\\) \u4e5f\u5c06\u4f1a\u662f\u6b64\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u4e00\u7ec4\u89e3\u3002</p>"},{"location":"System%20of%20Difference%20Constraints/#_4","title":"\u5b9e\u73b0","text":"<p>\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\u82e5\u8be5\u7ec4\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u6ca1\u6709\u53ef\u884c\u89e3\uff0c\u90a3\u4e48\u5c31\u4f1a\u8dd1\u51fa\u6b63\u73af\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Bellman-Ford \u5bf9\u8d1f\u8fb9\u6743\u56fe\u8dd1\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\u5e76\u5224\u65ad\u662f\u5426\u6709\u6b63\u73af\u3002\u4f46\u662f\u8fd9\u4e2a\u56fe\u53ef\u80fd\u4e0d\u4e00\u5b9a\u662f\u8fde\u901a\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9 \\(0\\)\uff0c\u7136\u540e\u5f80\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u90fd\u8138\u4e0a\u4e00\u6761\u8fb9\u6743\u4f4d \\(0\\) \u7684\u8fb9\uff0c\u5e76\u4ece\u8d85\u7ea7\u6e90\u70b9\u5f00\u59cb\u8dd1\u6700\u957f\u8def\uff0c\u82e5\u9047\u5230\u4e86\u8d1f\u73af\u5c31\u8bf4\u660e\u65e0\u89e3\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528 Bellman-Ford \u7684\u961f\u5217\u4f18\u5316\u7248\u672c SPFA\uff0c\u5728\u968f\u673a\u56fe\u5185\u53ef\u4ee5\u62e5\u6709 \\(\\mathcal O(n+m)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4f46\u82e5\u6709\u8d1f\u73af\u5219\u548c Bellman-Ford \u4e00\u6837\uff0c\u662f\u6700\u574f \\(\\mathcal O(nm)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p>"},{"location":"System%20of%20Difference%20Constraints/#_5","title":"\u4f8b\u9898","text":""},{"location":"System%20of%20Difference%20Constraints/#p1993-k","title":"P1993 \u5c0f K \u7684\u519c\u573a","text":""},{"location":"System%20of%20Difference%20Constraints/#_6","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5c0f K \u5728 MC \u91cc\u9762\u5efa\u7acb\u5f88\u591a\u5f88\u591a\u7684\u519c\u573a\uff0c\u603b\u5171 \\(n\\) \u4e2a\uff0c\u4ee5\u81f3\u4e8e\u4ed6\u81ea\u5df1\u90fd\u5fd8\u8bb0\u4e86\u6bcf\u4e2a\u519c\u573a\u4e2d\u79cd\u690d\u4f5c\u7269\u7684\u5177\u4f53\u6570\u91cf\u4e86\uff0c\u4ed6\u53ea\u8bb0\u5f97\u4e00\u4e9b\u542b\u7cca\u7684\u4fe1\u606f\uff08\u5171 \\(m\\) \u4e2a\uff09\uff0c\u4ee5\u4e0b\u5217\u4e09\u79cd\u5f62\u5f0f\u63cf\u8ff0\uff1a - \u519c\u573a \\(a\\) \u6bd4\u519c\u573a \\(b\\) \u81f3\u5c11\u591a\u79cd\u690d\u4e86 \\(c\\) \u4e2a\u5355\u4f4d\u7684\u4f5c\u7269\uff1b - \u519c\u573a \\(a\\) \u6bd4\u519c\u573a \\(b\\) \u81f3\u591a\u591a\u79cd\u690d\u4e86 \\(c\\) \u4e2a\u5355\u4f4d\u7684\u4f5c\u7269\uff1b - \u519c\u573a \\(a\\) \u4e0e\u519c\u573a \\(b\\) \u79cd\u690d\u7684\u4f5c\u7269\u6570\u4e00\u6837\u591a\u3002  </p> <p>\u4f46\u662f\uff0c\u7531\u4e8e\u5c0f K \u7684\u8bb0\u5fc6\u6709\u4e9b\u504f\u5dee\uff0c\u6240\u4ee5\u4ed6\u60f3\u8981\u77e5\u9053\u5b58\u4e0d\u5b58\u5728\u4e00\u79cd\u60c5\u51b5\uff0c\u4f7f\u5f97\u519c\u573a\u7684\u79cd\u690d\u4f5c\u7269\u6570\u91cf\u4e0e\u4ed6\u8bb0\u5fc6\u4e2d\u7684\u6240\u6709\u4fe1\u606f\u543b\u5408\u3002</p>"},{"location":"System%20of%20Difference%20Constraints/#_7","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u6574\u6570 \\(n\\) \u548c \\(m\\)\uff0c\u5206\u522b\u8868\u793a\u519c\u573a\u6570\u76ee\u548c\u5c0f K \u8bb0\u5fc6\u4e2d\u7684\u4fe1\u606f\u6570\u76ee\u3002  </p> <p>\u63a5\u4e0b\u6765 \\(m\\) \u884c\uff1a  </p> <ul> <li>\u5982\u679c\u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u662f \\(1\\)\uff0c\u63a5\u4e0b\u6765\u6709\u4e09\u4e2a\u6574\u6570 \\(a,b,c\\)\uff0c\u8868\u793a\u519c\u573a \\(a\\) \u6bd4\u519c\u573a \\(b\\) \u81f3\u5c11\u591a\u79cd\u690d\u4e86 \\(c\\) \u4e2a\u5355\u4f4d\u7684\u4f5c\u7269\uff1b  </li> <li>\u5982\u679c\u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u662f \\(2\\)\uff0c\u63a5\u4e0b\u6765\u6709\u4e09\u4e2a\u6574\u6570 \\(a,b,c\\)\uff0c\u8868\u793a\u519c\u573a \\(a\\) \u6bd4\u519c\u573a \\(b\\) \u81f3\u591a\u591a\u79cd\u690d\u4e86 \\(c\\) \u4e2a\u5355\u4f4d\u7684\u4f5c\u7269;  </li> <li>\u5982\u679c\u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u662f \\(3\\)\uff0c\u63a5\u4e0b\u6765\u6709\u4e24\u4e2a\u6574\u6570 \\(a,b\\)\uff0c\u8868\u793a\u519c\u573a \\(a\\) \u79cd\u690d\u7684\u7684\u6570\u91cf\u548c \\(b\\) \u4e00\u6837\u591a\u3002</li> </ul>"},{"location":"System%20of%20Difference%20Constraints/#_8","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u5982\u679c\u5b58\u5728\u67d0\u79cd\u60c5\u51b5\u4e0e\u5c0f K \u7684\u8bb0\u5fc6\u543b\u5408\uff0c\u8f93\u51fa <code>Yes</code>\uff0c\u5426\u5219\u8f93\u51fa <code>No</code>\u3002</p>"},{"location":"System%20of%20Difference%20Constraints/#_9","title":"\u6837\u4f8b","text":""},{"location":"System%20of%20Difference%20Constraints/#1","title":"\u6837\u4f8b\u8f93\u5165 #1","text":"<pre><code>3 3\n3 1 2\n1 1 3 1\n2 2 3 2\n</code></pre>"},{"location":"System%20of%20Difference%20Constraints/#1_1","title":"\u6837\u4f8b\u8f93\u51fa #1","text":"<pre><code>Yes\n</code></pre>"},{"location":"System%20of%20Difference%20Constraints/#_10","title":"\u63d0\u793a","text":"<p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\u4fdd\u8bc1 \\(1 \\le n,m,a,b,c \\le 5 \\times 10^3\\)\u3002</p>"},{"location":"System%20of%20Difference%20Constraints/#_11","title":"\u89e3\u6cd5","text":"<p>\u8fd9\u9898\u5c31\u662f\u88f8\u7684\u5dee\u5206\u7ea6\u675f\uff0c\u6709\u4e09\u79cd\u4e0d\u7b49\u5f0f\uff0c\u6211\u4eec\u5206\u522b\u8fdb\u884c\u4e0d\u540c\u7684\u8fde\u8fb9\uff1a</p> <ul> <li>\\(x_a-x_b\\ge c\\to x_b-x_a\\le -c\\)\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece \\(a\\) \u5f80 \\(b\\) \u8fde\u4e00\u6761 \\(-c\\) \u7684\u8fb9\uff1b</li> <li>\\(x_a-x_b\\ge c\\)\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4ece \\(b\\) \u5f80 \\(c\\) \u8fde\u4e00\u6761 \\(c\\) \u7684\u8fb9\uff1b</li> <li>\\(x_a=x_b\\to x_a,x_b\\le 0,x_b-x_a\\le 0\\)\uff0c\u53ef\u4ee5\u5728 \\(a\\) \u548c \\(b\\) \u53ea\u89c1\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a \\(0\\) \u7684\u53cc\u5411\u8fb9\u3002</li> </ul>"},{"location":"System%20of%20Difference%20Constraints/#_12","title":"\u4ee3\u7801","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\nusing ll = long long;\n\nll n, m;\nqueue&lt;ll&gt; q;\n\nint main() {\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;vector&lt;pair&lt;ll, ll&gt;&gt;&gt; e(n + 1, vector&lt;pair&lt;ll, ll&gt;&gt;());\n  for (ll i = 1, o, u, v, w; i &lt;= m; i++) {\n    cin &gt;&gt; o &gt;&gt; u &gt;&gt; v;\n    if (o == 1) {\n      cin &gt;&gt; w, e[v].emplace_back(u, w);\n    } else if (o == 2) {\n      cin &gt;&gt; w, e[u].emplace_back(v, -w);\n    } else {\n      e[u].emplace_back(v, 0);\n      e[v].emplace_back(u, 0);\n    }\n  }\n  for (ll i = 1; i &lt;= n; i++) {\n    e[0].emplace_back(i, 0);\n  }\n  vector&lt;ll&gt; d(n + 1, -1e9), f(n + 1), c(n + 1);\n  for (q.push(0), d[0] = 0, f[0] = 1; q.size(); q.pop()) {\n    ll t = q.front();\n    f[t] = 0;\n    for (auto i : e[t]) {\n      if (d[t] + i.second &gt; d[i.first]) {\n        d[i.first] = d[t] + i.second;\n        if (!f[i.first]) {\n          f[i.first] = 1;\n          q.push(i.first);\n          if (++c[i.first] &gt;= n) {\n            cout &lt;&lt; \"No\\n\";\n            return 0;\n          }\n        }\n      }\n    }\n  }\n  cout &lt;&lt; \"Yes\\n\";\n  return 0;\n}\n</code></pre>"},{"location":"about/","title":"\u5173\u4e8e\u4f5c\u8005\u53ca\u7ad9\u70b9","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u7531\u597d\u6e34\u9e45\u521b\u5efa\u7684\u7ad9\u70b9\uff0c\u540d\u5b57\u53eb\u505a haokee-wiki\uff0c\u91cc\u9762\u6536\u85cf\u4e86\u4e00\u4e9b\u597d\u6e34\u9e45\u81ea\u5df1\u5b66\u4e60 OI \u7684\u8d44\u6599\uff0c\u5305\u62ec\u597d\u6e34\u9e45\u81ea\u5df1\u521b\u4f5c\u7684\u3001\u4ece\u522b\u4eba\u90a3\u91cc\u501f\u9274\u7684\u3002\u5f53\u7136\uff0c\u597d\u6e34\u9e45\u662f\u4e00\u4e2a\u5f88\u6709\u6811\u679d\u7684\u9e45\uff0c\u5bf9\u4e8e\u501f\u9274\u7684\u6587\u7ae0\uff0c\u597d\u6e34\u9e45\u4e5f\u662f\u4f1a\u7ed9\u51fa\u539f\u4f5c\u8005\u540d\u7684\uff0c\u51c9\u5929\u4e0b\u4e4b\u5fc3\u4e5f\uff01</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main() {\n  cout &lt;&lt; \"\u4f60\u597d\uff0cMkDocs\uff01\" &lt;&lt; endl;\n  return 0;\n}\n</code></pre>"}]}